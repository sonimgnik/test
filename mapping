#Configure environments

install.packages("ggplot2")
install.packages("openintro") # states data
install.packages("ggmap")
install.packages("readxl")
install.packages("gdata") # to reformat some data sets, such as using cbindX function, can also be used to read xls files
install.packages("zipcode")
install.packages("mapsapi")
install.packages("devtools")
devtools::install_github("michaeldorman/mapsapi")

library(gdata) 
library(ggplot2)
library(openintro) 
library(ggmap)
library(readxl)
library(sqldf)
library(zipcode)
library(mapsapi)

#----------------------------------------------------------------
# Step 1: Load the Data
## 1. Read the data
setwd("YOU_FILE_PATH")
df <- read_xlsx("MedianZIP_2_2.xlsx")
head(df)
str(df)
View(df)
##2. Clean up the dataframe
###2a. Remove unneeded information
df <- df[-1,]
###2b. Update column names (zip, median, mean, population)
colnames(df) <- c("zip","median","mean","population")

##remove commas and make numeric
df$median <- as.numeric(gsub(",", "", df$median))
df$mean <- as.numeric(gsub(",", "", df$mean))
df$population <- as.numeric(gsub(",", "", df$population))

##3. Load the 'zipcode' package
?zipcode

data(zipcode)

df$zip <- clean.zipcodes(df$zip) #reformat the zip codes

##4. Merge the zip code information from two data frames
dfNew <- merge(df, zipcode, by ="zip")
head(dfNew)

##5. Remove Hawaii and Alaska
dfNew <- dfNew[dfNew$state != "HI", ]
dfNew <- dfNew[dfNew$state != "AK", ]
dfNew <- dfNew[dfNew$state != "DC", ]

#----------------------------------------------------------------
#Step 2: Show the income & population per state

##1. Create a simpler dataframe with median income and population
income <- tapply(dfNew$median, dfNew$state, mean)
state <- rownames(income)
medianIncome <- data.frame(state, income)

pop <- tapply(dfNew$population, dfNew$state, sum)
state <- rownames(pop)
statePop <- data.frame(state,pop)

dfSimple <- merge(medianIncome, statePop, by="state")
head(dfSimple)

# previous steps can be done using sql instead and scaling the income at the state level
dfSimple<- sqldf("select state, avg(median) as income, sum(population) as pop from dfNew group by state")
dfSimple<- sqldf("select state, (income/pop) as income, pop from dfSimple")

head(dfSimple)

##2. Add state abbreviations and state names (lower case)
##use match(dfSimple$state,state.abb)
dfSimple$stateName <- state.name[match(dfSimple$state,state.abb)]
##convert to lower case
dfSimple$stateName <- tolower(dfSimple$stateName)

##Show us map, representing color with average median income
us <- map_data("state")


##3. Show the U.S. map, representing the color with the average median income of that state
##Function To remove axis formats from the heatmaps
ditch_the_axes <- theme(
  axis.text = element_blank(),
  axis.line = element_blank(),
  axis.ticks = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.title = element_blank()
)

MapIncome <- ggplot(dfSimple, aes(map_id=stateName))
MapIncome <- MapIncome + geom_map(map=us, aes(fill=dfSimple$income))
MapIncome <- MapIncome + expand_limits(x=us$long, y=us$lat)

MapIncome <- MapIncome + coord_map()
MapIncome <- MapIncome + ggtitle("AVG median income by state") + theme(plot.title = element_text(hjust=0.5))
MapIncome <- MapIncome + guides(fill=guide_legend(title="Income")) + ditch_the_axes
MapIncome

##4.Create a second map with color representing the population of the state
MapIncome <- ggplot(dfSimple, aes(map_id=stateName))
MapIncome <- MapIncome + geom_map(map=us, aes(fill=dfSimple$pop))
MapIncome <- MapIncome + expand_limits(x=us$long, y=us$lat)

MapIncome <- MapIncome + coord_map()
MapIncome <- MapIncome + ggtitle("Population by state") + theme(plot.title = element_text(hjust=0.5))
MapIncome <- MapIncome + guides(fill=guide_legend(title="Population")) + ditch_the_axes
MapIncome

#----------------------------------------------------------------
# Step 3: Show the income per zip code
##1. Have draw each zip code on the map, where the color of the ‘dot’ is based 
## on the median income. To make the map look appealing, have the background of 
## the map be black.
dfNew$stateName <- state.name[match(dfNew$state,state.abb)]
dfNew$stateName <- tolower(dfNew$stateName)
head(dfNew)

MapZip <- ggplot(dfNew, aes(map_id=stateName))
MapZip <- MapZip + geom_map(map=us, fill="black", color="black")
MapZip <- MapZip + expand_limits(x=us$long, y=us$lat)

MapZip <- MapZip + geom_point(data=dfNew, aes(x=dfNew$longitude, 
                                              y=dfNew$latitude, color=dfNew$median))
MapZip <- MapZip + coord_map()
MapZip <- MapZip + ggtitle("Income per zip code") + 
  theme(plot.title=element_text(hjust=0.5))
MapZip <- MapZip + ditch_the_axes 
MapZip
head(dfNew)

#----------------------------------------------------------------
# Step 4: Show Zip Code Density
##############################
###1. Now generate a different map, one where we can easily see where there are 
###clots of zip codes, and where there are few (using the ‘stat_density2d’ function).

# Generate a map showing density of zip codes
MapDensity <- ggplot(dfNew, aes(map_id=stateName))
MapDensity <- MapDensity + geom_map(map=us, fill="black", color="white")

MapDensity <- MapDensity + expand_limits(x=us$long, y=us$lat)

MapDensity <- MapDensity + stat_density_2d(data=dfNew, aes(x=dfNew$longitude, y=dfNew$latitude))

MapDensity <- MapDensity + coord_map()
MapDensity <- MapDensity + ggtitle("zip code density") + theme(plot.title=element_text(hjust=0.5))
MapDensity

#----------------------------------------------------------------
#Step 5: Zoom in to the region around NYC
#########################################
##1. Repeat steps 3 & 4, but have the image / map be of the northeast U.S. 
## (centered around New York).

# install dev version of ggmap
devtools::install_github("dkahle/ggmap")

library(ggmap)
# Loading required package: ggplot2
# save api key
register_google(key = "API KEY")

#Test Google API
# check if key is saved
has_goog_key()
#> [1] TRUE

ggmap(
  ggmap = get_map(
    "New York",
    zoom = 13, scale = "auto",
    maptype = "satellite",
    source = "google"),
  extent = "device",
  legend = "topright"
)

#Show income per zip code around Harvard University
#Define the area and create limits to be used in the heatmap

# API: API KEY

# Example Map
zoomGeo <- geocode("Harvard University, MA")
zoomAmount <- 10

centerx <- zoomGeo$lon
centery <- zoomGeo$lat

ylimit <- c(centery-zoomAmount, centery+zoomAmount)
xlimit <- c(centerx-zoomAmount, centerx+zoomAmount)

#Show income per zip code around NYC
MapZipZoom <- MapZip + xlim(xlimit) + ylim(ylimit) + coord_map()

MapZipZoom <- MapZipZoom + geom_point(aes(x=centerx, y=centery), color="darkred", size=3)

MapZipZoom <- MapZipZoom + ggtitle("Income by Zip around Harvard University ") + theme(plot.title=element_text(hjust=0.5))
MapZipZoom

# Final Map
zoomGeo <- geocode("New York, NY")
zoomAmount <- 1

centerx <- zoomGeo$lon
centery <- zoomGeo$lat

ylimit <- c(centery-zoomAmount, centery+zoomAmount)
xlimit <- c(centerx-zoomAmount, centerx+zoomAmount)

#Show income per zip code around NYC
MapZipZoom <- MapZip + xlim(xlimit) + ylim(ylimit) + coord_map()

MapZipZoom <- MapZipZoom + geom_point(aes(x=centerx, y=centery), color="darkred", size=3)

MapZipZoom <- MapZipZoom + ggtitle("Income by Zip around Harvard University ") + theme(plot.title=element_text(hjust=0.5))
MapZipZoom


